"""
Aggregated fees across all chains and all currencies for a particular day.
"""
type DailyFiatFees @entity {
  """
  Unique identifier: YYYY-MM-DD
  """
  id: ID!

  """
  GBP value of the fee amount
  """
  amountGBP: Float!

  """
  USD value of the fee amount
  """
  amountUSD: Float!

  """
  Fee breakdown by currency for this day
  """
  currencyBreakdown: [DailyCryptoFees!]! @derivedFrom(field: "dailyFiatFees")

  """
  Date in YYYY-MM-DD format
  """
  date: String!

  """
  Date as Unix timestamp for easier querying
  """
  dateTimestamp: Timestamp!

  """
  Transactions
  """
  transactions: [FeeTransaction!]! @derivedFrom(field: "dailyFiatFees")
}

"""
Daily fees aggregated by currency across all chains.
"""
type DailyCryptoFees @entity {
  """
  Unique identifier: YYYY-MM-DD_currency
  """
  id: ID!

  """
  Total fee amount for this day (in native currency)
  The value is normalized to 18 decimals (e.g., 0.1e18 is 0.1).
  """
  amount: Float!

  """
  Native currency symbol (ETH, POL, BNB, etc.)
  """
  currency: String!

  """
  Reference to the parent daily fiat fees
  """
  dailyFiatFees: DailyFiatFees!

  """
  Date in YYYY-MM-DD format
  """
  date: String!

  """
  Date as Unix timestamp for easier querying
  """
  dateTimestamp: Timestamp!

  """
  Transactions in this currency for this day
  """
  transactions: [FeeTransaction!]! @derivedFrom(field: "dailyCryptoFees")
}

"""
Fee collection transaction. The withdrawn amount is an aggregate value of all fees collected up until the time of collection.
"""
type FeeCollectionTransaction @entity {
  """
  Unique identifier: chainId_transactionHash_logIndex
  """
  id: ID!

  """
  Admin address who collected the fees
  """
  admin: String!

  """
  Airdrop campaign address (only for Airdrops events, corresponds to merkleBase from event)
  """
  airdropCampaign: String

  """
  Fee amount collected (in native currency, normalized to 18 decimals)
  """
  amount: Float!

  """
  Block number of the transaction
  """
  block: BigInt!

  """
  Chain ID where the fee was collected
  """
  chainId: BigInt!

  """
  The contract address that emitted the event
  """
  contractAddress: String!

  """
  The tx.origin of the Ethereum transaction.
  """
  from: Bytes!

  """
  Transaction hash
  """
  hash: String!

  """
  Log index within the transaction
  """
  logIndex: BigInt!

  """
  Protocol type: "airdrops", "flow", or "lockup"
  """
  protocol: String!

  """
  Block Unix timestamp
  """
  timestamp: Timestamp!
}

"""
Ethereum transaction that generated a fee that is due to be collected.
"""
type FeeTransaction @entity {
  """
  Unique identifier: chainId_transactionHash
  """
  id: ID!

  """
  Fee amount from this transaction (in native currency)
  """
  amount: Float!

  """
  GBP value of the fee amount from this transaction
  """
  amountGBP: Float!

  """
  USD value of the fee amount from this transaction
  """
  amountUSD: Float!

  """
  Block number of the transaction
  """
  block: BigInt!

  """
  Chain ID where the fee was generated
  """
  chainId: BigInt!

  """
  The contract address where the fee was generated
  """
  contractAddress: String!

  """
  Native currency symbol (ETH, POL, BNB, etc.)
  """
  currency: String!

  """
  Reference to DailyCryptoFees entity
  """
  dailyCryptoFees: DailyCryptoFees!

  """
  Reference to DailyFiatFees entity
  """
  dailyFiatFees: DailyFiatFees!

  """
  Transaction hash
  """
  hash: String!

  """
  Block Unix timestamp
  """
  timestamp: Timestamp!
}

"""
A user is an address that has interacted with at least one Sablier contract.

This includes:

- Stream creators and senders
- Stream recipients
- Airdrop creators and claimers
- Anyone who withdraws from streams or claims airdrops on behalf of others

Notes:

- Only implemented in Envio.
- This is an internal entity we use for analytics. It's not used in the Sablier UI.
- May be enhanced with derived relations in the future. See https://github.com/sablier-labs/indexers/issues/159
"""
type User @entity {
  """
  Unique identifier: chainId_address
  """
  id: ID!

  """
  User's Ethereum address (lowercase)
  """
  address: String!

  """
  Chain ID where this user was first seen
  """
  chainId: BigInt!

  """
  True if user has only claimed airdrops (no other protocol interaction)
  """
  isOnlyAirdropClaimer: Boolean!

  """
  Transactions
  """
  transactions: [UserTransaction!]! @derivedFrom(field: "user")
}

"""
Transaction-level user interaction tracking.
"""
type UserTransaction @entity {
  """
  Unique identifier: userId_transactionHash
  """
  id: ID!

  """
  Block number of the transaction
  """
  block: BigInt!

  """
  The contract address where the revenue was generated
  """
  contractAddress: String!

  """
  Transaction fee in native currency (ETH, POL, etc.)
  The value is normalized to 18 decimals (e.g., 0.1e18 is 0.1).
  """
  fee: Float!

  """
  Transaction hash
  """
  hash: String!

  """
  Whether this transaction is an airdrop claim
  """
  isAirdropClaim: Boolean!

  """
  Block timestamp
  """
  timestamp: Timestamp!

  """
  Reference to User entity
  """
  user: User!
}
