# ---------------------------------------------------------------------------- #
#                                      Enums                                     #
# ---------------------------------------------------------------------------- #
enum ActionCategory {
  Approval
  ApprovalForAll
  Adjust
  Create
  Deposit
  Pause
  Refund
  Restart
  Transfer
  Void
  Withdraw
}

enum StreamCategory {
  Flow
}

# ---------------------------------------------------------------------------- #
#                                    Action                                    #
# ---------------------------------------------------------------------------- #
type Action @entity {
  # ------------------------------------ IDs ----------------------------------- #
  """
  Unique identifier resolving to transaction hash concatenated with the log index (there may be multiple actions per tx)
  """
  id: ID!

  """
  Unique global id tracked by the subgraph watcher
  """
  subgraphId: BigInt!

  # -------------------------------- Transaction ------------------------------- #
  """
  Block number of the Ethereum transaction
  """
  block: BigInt!

  """
  The id of the chain, e.g. 137 for Polygon
  """
  chainId: BigInt!

  """
  Hash of the Ethereum transaction that triggered this action
  """
  hash: Bytes!

  """
  Address that triggered the transaction
  """
  from: Bytes!

  """
  Unix timestamp of the Ethereum transaction
  """
  timestamp: BigInt!

  # --------------------------------- Metadata --------------------------------- #
  """
  Category of action, e.g. Deposit
  """
  category: ActionCategory!

  """
  Contract through which the stream actions was triggered
  """
  contract: Bytes!

  """
  Stream linked to this action (or null if this is a contract level action)
  """
  stream: Stream

  # --------------------------------- Addresses -------------------------------- #
  """
  Address of an actor, differs based on action type e.g. for Create it resolves to the sender
  """
  addressA: Bytes

  """
  Address of an actor, differs based on action type e.g. for Transfer it resolves to the new recipient
  """
  addressB: Bytes

  # ---------------------------------- Amounts --------------------------------- #
  """
  Amount, differs based on action type, e.g. for Deposit it resolves to the depositAmount
  """
  amountA: BigInt

  """
  Amount, differs based on action type, e.g. for Withdraw it resolves to the refundedAmount
  """
  amountB: BigInt

  """
  Amount, records the fee paid for certain actions, in base asset (e.g. withdraw is payable >V10)
  """
  fee: BigInt
}

# ---------------------------------------------------------------------------- #
#                                     Asset                                    #
# ---------------------------------------------------------------------------- #
type Asset @entity(immutable: true) {
  """
  Unique identifier resolving to the ERC20 token address
  """
  id: ID!

  """
  Address of the ERC20 token
  """
  address: Bytes!

  """
  The id of the chain, e.g. 137 for Polygon
  """
  chainId: BigInt!

  """
  Decimals of the ERC20 token
  """
  decimals: BigInt!

  """
  Name of the ERC20 token
  """
  name: String!

  """
  Streams that rely on this token
  """
  streams: [Stream!]! @derivedFrom(field: "asset")

  """
  Symbol of the ERC20 token
  """
  symbol: String!
}

# ---------------------------------------------------------------------------- #
#                                     Batch                                    #
# ---------------------------------------------------------------------------- #
type Batch @entity {
  """
  Unique identifier of the batch, resolving to the hash of the parent transaction
  """
  id: String!

  # -------------------------------- Transaction ------------------------------- #
  """
  Hash of the Ethereum transaction that created this batch
  """
  hash: Bytes!

  """
  Timestamp of the transaction that created this batch
  """
  timestamp: BigInt!

  # ------------------------------- Batch Fields ------------------------------- #
  """
  Batcher account that started this batch, i.e., the sender
  """
  batcher: Batcher

  """
  Index of the batch resolving to a conditional counter of 2+ stream batches, filtered by sender
  Label is null for batches containing a single stream.
  """
  label: String

  """
  Number of streams that are part of this batch
  """
  size: BigInt!

  """
  Streams that are part of this batch
  """
  streams: [Stream!]! @derivedFrom(field: "batch")
}

# ---------------------------------------------------------------------------- #
#                                    Batcher                                   #
# ---------------------------------------------------------------------------- #
type Batcher @entity {
  """
  Unique identifier of the batcher account, i.e., the sender address
  """
  id: String!

  """
  Address of the sender
  """
  address: Bytes!

  """
  Numeric index, will be used to construct the batch label
  """
  batchIndex: BigInt!

  """
  Batches started by this batcher (sender)
  """
  batches: [Batch!]! @derivedFrom(field: "batcher")
}

# ---------------------------------------------------------------------------- #
#                                    Stream                                    #
# ---------------------------------------------------------------------------- #
type Stream @entity {
  # ------------------------------------ IDs ----------------------------------- #
  """
  Unique identifier: {contractAddress}-{chainId}-{tokenId}
  """
  id: String!

  """
  Like the id: {contractAlias}-{chainId}-{tokenId}
  """
  alias: String!

  """
  The id of the chain, e.g. 137 for Polygon
  """
  chainId: BigInt!

  """
  Unique global id as tracked by the subgraph watcher
  ðŸš¨ This may change if new data sources are added and the chronological order of streams changes.
  """
  subgraphId: BigInt!

  """
  Stream id provided by the Flow contract; this is the ERC-721 tokenId
  """
  tokenId: BigInt!

  # -------------------------------- Transaction ------------------------------- #
  """
  Hash of the Ethereum transaction that created this stream
  """
  hash: Bytes!

  """
  Timestamp of the stream creation (used for sorting)
  """
  timestamp: BigInt!

  # ---------------------------------- Actions --------------------------------- #
  """
  Actions triggered in the context of this stream
  """
  actions: [Action!]! @derivedFrom(field: "stream")

  """
  Action in which the stream rate per second was adjusted
  """
  lastAdjustmentAction: Action

  """
  Action in which the stream was paused
  """
  pausedAction: Action

  """
  Action in which the stream was voided
  """
  voidedAction: Action

  # ----------------------------------- Flow ----------------------------------- #
  """
  ERC-20 token distributed via this stream
  """
  asset: Asset!

  """
  Current balance of the stream. (Equals to the ERC20 balanceOf, and it is changed by every deposit and withdraw)
  """
  availableAmount: BigInt!

  """
  The batch the stream is part of, only available when created within a batch create transaction
  """
  batch: Batch!

  """
  Category used for sorting
  """
  category: StreamCategory!

  """
  The Flow contract the stream originates from
  """
  contract: Bytes!

  """
  The address that calls the create method (anyone can create a stream on any sender's behalf)
  """
  creator: Bytes!

  """
  Unix timestamp for the moment until the stream is solvent (not in debt)
  """
  depletionTime: BigInt!

  """
  Amount resolving to the sum of all deposits
  """
  depositedAmount: BigInt!

  """
  Amount resolving to the debt that was forgiven by the void action
  """
  forgivenDebt: BigInt!

  """
  Timestamp of the last adjustment action
  """
  lastAdjustmentTimestamp: BigInt!

  """
  Flag indicating if a stream is paused
  """
  paused: Boolean!

  """
  Unix timestamp of the paused action
  """
  pausedTime: BigInt

  """
  Position in the batch, only available when created within a batch create transaction
  """
  position: BigInt!

  """
  [Scaled 18D] current ratePerSecond of the stream, scaled to 18 decimals
  """
  ratePerSecond: BigInt!

  """
  Current recipient of the stream, can withdraw the funds (the recipient can change on stream/nft transfer)
  """
  recipient: Bytes!

  """
  Amount resolving to the sum of all refunds
  """
  refundedAmount: BigInt!

  """
  Manager of the stream, defined at creation by the funder (usually the same as the funder)
  """
  sender: Bytes!

  """
  [Scaled 18D] amount resolving to the streamed amount up until the ratePerSecond is changed, scaled to 18 decimals
  """
  snapshotAmount: BigInt!

  """
  Unix timestamp for the start of the stream
  """
  startTime: BigInt!

  """
  Flag indicating the transferability of the stream (decided when the stream is created)
  """
  transferable: Boolean!

  """
  Version of Flow contract, e.g. v1.0
  """
  version: String!

  """
  Flag indicating if a stream is voided
  """
  voided: Boolean!

  """
  Unix timestamp of the voided action
  """
  voidedTime: BigInt

  """
  Amount resolving to the sum of all withdrawals
  """
  withdrawnAmount: BigInt!
}

# ---------------------------------------------------------------------------- #
#                                    Watcher                                   #
# ---------------------------------------------------------------------------- #
type Watcher @entity {
  """
  Unique identifier for the watcher, resolving to the chainId - there is one watcher for entire subgraph
  """
  id: String!

  """
  Global index for streams
  """
  actionIndex: BigInt!

  """
  Hardcoded chain id
  """
  chainId: BigInt!

  """
  Flag indicating the initialization status of the subgraph
  """
  initialized: Boolean!

  """
  List of logs, for debugging purposes
  """
  logs: [String!]!

  """
  Global index for streams
  """
  streamIndex: BigInt!
}
