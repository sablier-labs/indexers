# ---------------------------------------------------------------------------- #
#                                      Enums                                   #
# ---------------------------------------------------------------------------- #
enum ActionCategory {
  Approval
  ApprovalForAll
  Cancel
  Create
  Renounce
  Transfer
  Withdraw
}

enum ContractCategory {
  LockupDynamic
  LockupLinear
  LockupMerged
  LockupTranched
}

enum StreamCategory {
  LockupDynamic
  LockupLinear
  LockupTranched
}

# ---------------------------------------------------------------------------- #
#                                    Action                                    #
# ---------------------------------------------------------------------------- #
type Action @entity {
  # ------------------------------------ IDs ----------------------------------- #
  """
  Unique identifier resolving to transaction hash concatenated with the log index (there may be multiple actions per tx)
  """
  id: ID!

  """
  Unique global id tracked by the subgraph watcher
  """
  subgraphId: BigInt!

  # -------------------------------- Transaction ------------------------------- #
  """
  Block number of the Ethereum transaction
  """
  block: BigInt!

  """
  The id of the chain, e.g. 137 for Polygon
  """
  chainId: BigInt!

  """
  Hash of the Ethereum transaction that triggered this action
  """
  hash: Bytes!

  """
  Address that triggered the transaction
  """
  from: Bytes!

  """
  Unix timestamp of the Ethereum transaction
  """
  timestamp: BigInt!

  # --------------------------------- Metadata ----------------------------------- #
  """
  Category of action e.g. Deposit or Withdraw
  """
  category: ActionCategory!

  """
  Contract through which the stream action was triggered
  """
  contract: Bytes!

  """
  Stream linked to this action (or null if this is a contract level action)
  """
  stream: Stream

  # --------------------------------- Addresses ---------------------------------- #
  """
  Address of an actor, differs based on action type e.g. for Create it resolves to the sender
  """
  addressA: Bytes

  """
  Address of an actor, differs based on action type e.g. for Transfer it resolves to the new recipient
  """
  addressB: Bytes

  # ---------------------------------- Amounts ----------------------------------- #
  """
  Amount, differs based on action type e.g. for Deposit it resolves to the depositAmount
  """
  amountA: BigInt

  """
  Amount, differs based on action type e.g. for Withdraw it resolves to the refundedAmount
  """
  amountB: BigInt

  """
  Amount, records the fee paid for certain actions, in base asset (e.g. withdraw is payable >V23)
  """
  fee: BigInt
}

# ---------------------------------------------------------------------------- #
#                                     Asset                                    #
# ---------------------------------------------------------------------------- #
type Asset @entity(immutable: true) {
  """
  Unique identifier resolving to the ERC20 token address
  """
  id: ID!

  """
  Address of the ERC20 token
  """
  address: Bytes!

  """
  The id of the chain, e.g. 137 for Polygon
  """
  chainId: BigInt!

  """
  Decimals of the ERC20 token
  """
  decimals: BigInt!

  """
  Name of the ERC20 token
  """
  name: String!

  """
  Streams that rely on this token
  """
  streams: [Stream!]! @derivedFrom(field: "asset")

  """
  Symbol of the ERC20 token
  """
  symbol: String!
}

# ---------------------------------------------------------------------------- #
#                                     Batch                                    #
# ---------------------------------------------------------------------------- #
type Batch @entity {
  """
  Unique identifier of the batch, resolving to the hash of the parent transaction
  """
  id: String!

  # -------------------------------- Transaction ------------------------------- #
  """
  Hash of the Ethereum transaction that created this batch
  """
  hash: Bytes!

  """
  Timestamp of the transaction that created this batch
  """
  timestamp: BigInt!

  # ------------------------------- Batch Fields ------------------------------- #
  """
  Batcher account that started this batch, i.e., the sender
  """
  batcher: Batcher

  """
  Index of the batch resolving to a conditional counter of 2+ stream batches, filtered by sender (label is null for batches containing a single stream, for filtering)
  """
  label: String

  """
  Number of streams that are part of this batch
  """
  size: BigInt!

  """
  Streams that are part of this batch
  """
  streams: [Stream!]! @derivedFrom(field: "batch")
}

# ---------------------------------------------------------------------------- #
#                                    Batcher                                   #
# ---------------------------------------------------------------------------- #
type Batcher @entity {
  """
  Unique identifier of the batcher account, i.e., the sender address
  """
  id: String!

  """
  Address of the sender
  """
  address: Bytes!

  """
  Numeric index, will be used to construct the batch label
  """
  batchIndex: BigInt!

  """
  Batches started by this batcher (sender)
  """
  batches: [Batch!]! @derivedFrom(field: "batcher")
}

# ---------------------------------------------------------------------------- #
#                                    Segment                                   #
# ---------------------------------------------------------------------------- #
type Segment @entity {
  """
  Unique identifier: {streamId}-{position}
  """
  id: String!

  """
  Amount resolving to the value streamed during this segment
  """
  amount: BigInt!

  """
  Derived amount resoling to the total amount streamed until the end of the segment
  """
  endAmount: BigInt!

  """
  Identical with the `milestone` field.
  """
  endTime: BigInt!

  """
  Exponent for the time passed percentage of the main amount compute function
  """
  exponent: BigInt!

  """
  Unix timestamp indicating the end of the segment.
  """
  milestone: BigInt!

  """
  Position of the segment inside the array
  """
  position: BigInt!

  """
  Derived amount resoling to the total amount streamed until the start of the segment
  """
  startAmount: BigInt!

  """
  Unix timestamp indicating the start of the segment.
  This is also the end time of previous segment or the start time of the stream.
  """
  startTime: BigInt!

  """
  Stream upon which the segment is used
  """
  stream: Stream!
}

# ---------------------------------------------------------------------------- #
#                                    Stream                                    #
# ---------------------------------------------------------------------------- #
type Stream @entity {
  # ------------------------------------ IDs ----------------------------------- #
  """
  Unique identifier: {contractAddress}-{chainId}-{tokenId}"
  """
  id: String!

  """
  Like the id: {contractAlias}-{chainId}-{tokenId}
  """
  alias: String!

  """
  The id of the chain, e.g. 137 for Polygon
  """
  chainId: BigInt!

  """
  Unique global id as tracked by the subgraph watcher
  ðŸš¨ This may change if new data sources are added and the chronological order of streams changes.
  """
  subgraphId: BigInt!

  """
  Stream id provided by the Lockup contract; this is the ERC-721 tokenId
  """
  tokenId: BigInt!

  # -------------------------------- Transaction ------------------------------- #
  """
  Hash of the Ethereum transaction that created this stream
  """
  hash: Bytes!

  """
  Timestamp of the stream creation (used for sorting)
  """
  timestamp: BigInt!

  # ---------------------------------- Actions ---------------------------------- #
  """
  Actions triggered in the context of this stream
  """
  actions: [Action!]! @derivedFrom(field: "stream")

  """
  Action in which the stream was
  """
  canceledAction: Action

  """
  Action in which the stream was made non-cancelable
  Note: this can be the create transaction
  """
  renounceAction: Action

  # ---------------------------------- Lockup ---------------------------------- #
  """
  ERC-20 token distributed via this stream
  """
  asset: Asset!

  """
  The batch the stream is part of, only available when created within a batch create transaction
  """
  batch: Batch!

  """
  Flag indicating the cancelability of the stream
  """
  cancelable: Boolean!

  """
  Flag indicating if the stream was canceled
  """
  canceled: Boolean!

  """
  Unix timestamp for the when the stream was canceled
  """
  canceledTime: BigInt

  """
  Category used for sorting
  """
  category: StreamCategory!

  """
  The Lockup contract the stream originates from
  """
  contract: Bytes!

  """
  Snapshot of the duration in seconds (the difference between end and start time)
  """
  depositAmount: BigInt!

  """
  Unix timestamp for the end of the stream
  """
  duration: BigInt!

  """
  Amount deposited in the stream
  """
  endTime: BigInt!

  """
  The account that funded the stream (which can be different from the sender)
  """
  funder: Bytes!

  """
  Amount resolving to the sum still inside the stream (regardless of it being locked or not).
  This is the difference between the deposit and withdrawn amounts before the cancel.
  """
  intactAmount: BigInt!

  """
  True for LL stream streams with an initial unlock
  """
  parties: [Bytes!]!

  """
  Position in the batch, only available when created within a batch create transaction
  """
  position: BigInt!

  """
  Owner of the proxy when the stream is created through a PRBProxy (https://github.com/PaulRBerg/prb-proxy)
  Note that sender = proxy, and proxender = owner of proxy
  """
  proxender: Bytes

  """
  Flag for streams created through a PRBProxy
  """
  proxied: Boolean!

  """
  Current recipient of the stream, can withdraw the funds (the recipient can change on stream/nft transfer)
  """
  recipient: Bytes!

  """
  Unix timestamp when the stream was made non-cancelable
  """
  renounceTime: BigInt

  """
  Manager of the stream, defined at creation by the funder (usually the same as the funder)
  """
  sender: Bytes!

  """
  An optional parameter to specify the shape of the distribution
  """
  shape: String

  """
  Unix timestamp for the start of the stream
  """
  startTime: BigInt!

  """
  Flag indicating the transferability of the stream (decided when the stream is created)
  """
  transferable: Boolean!

  """
  Version of Lockup contract, e.g. v1.0
  """
  version: String!

  """
  Amount resolving to the sum of all withdrawals
  """
  withdrawnAmount: BigInt!

  # ------------------------------- LockupLinear ------------------------------- #
  """
  Flag for LL streams with a cliff
  """
  cliff: Boolean!

  """
  The amount that will unlock at the cliff time
  """
  cliffAmount: BigInt

  """
  Unix timestamp for the start of the cliff
  """
  cliffTime: BigInt

  """
  Flag for LL streams with an initial unlock
  """
  initial: Boolean!

  """
  The initial unlock amount specifically for lockup linear, zero <V23
  """
  initialAmount: BigInt

  # ------------------------------- LockupDynamic ------------------------------ #
  """
  Segments of the distribution function, only available on LD streams
  """
  segments: [Segment!]! @derivedFrom(field: "stream")

  # ------------------------------ LockupTranched ------------------------------ #
  """
  Tranches of the distribution function, only available on LT streams
  """
  tranches: [Tranche!]! @derivedFrom(field: "stream")
}

# ---------------------------------------------------------------------------- #
#                                    Tranche                                   #
# ---------------------------------------------------------------------------- #
type Tranche @entity {
  """
  Unique identifier: {streamId}-{position}
  """
  id: String!

  """
  Position of the tranche inside the array
  """
  position: BigInt!

  """
  Stream upon which the tranche is used
  """
  stream: Stream!

  """
  Amount resolving to the value streamed during this tranche
  """
  amount: BigInt!

  """
  Derived amount resoling to the total amount streamed until the end of the timestamp
  """
  endAmount: BigInt!

  """
  Timestamp resolving to the *timestamp* parameter
  """
  endTime: BigInt!

  """
  Derived amount resoling to the total amount streamed until the start of the timestamp
  """
  startAmount: BigInt!

  """
  Timestamp resolving to the start moment of the timestamp (the end time of previous timestamp or the startTime of the stream)
  """
  startTime: BigInt!

  """
  Timestamp resolving to the end moment of the tranche
  """
  timestamp: BigInt!
}

# ---------------------------------------------------------------------------- #
#                                    Watcher                                   #
# ---------------------------------------------------------------------------- #
type Watcher @entity {
  """
  Unique identifier for the watcher, resolving to the chainId - there is one watcher for entire subgraph
  """
  id: String!

  """
  Global index for streams
  """
  actionIndex: BigInt!

  """
  Hardcoded chain id
  """
  chainId: BigInt!

  """
  Flag indicating the initialization status of the subgraph
  """
  initialized: Boolean!

  """
  List of logs, for debugging purposes
  """
  logs: [String!]!

  """
  Global index for streams
  """
  streamIndex: BigInt!
}
