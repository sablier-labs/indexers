type Segment @entity(immutable: true) {
  """
  Unique identifier: {streamId}-{position}
  """
  id: String!

  """
  Amount distributed by this segment.
  """
  amount: BigInt!

  """
  Total amount distributed at `endTime`. This is the sum of this segment's amount and all previous segments' amounts.
  """
  endAmount: BigInt!

  """
  Alias for the `milestone` field.
  """
  endTime: BigInt!

  """
  Exponent used for the streamed amount calculations.
  See https://github.com/sablier-labs/lockup/blob/v2.0.1/src/types/DataTypes.sol#L279-L288
  """
  exponent: BigInt!

  """
  Unix timestamp indicating the end of the segment.
  """
  milestone: BigInt!

  """
  Position of the segment inside the array.
  """
  position: BigInt!

  """
  Total amount distributed by the stream at `startTime`. This is the sum of all previous segments' amounts.
  """
  startAmount: BigInt!

  """
  Unix timestamp indicating the start of the segment.
  This is also the end time of the previous segment or, if this is the first segment, it is the start time of the stream.
  """
  startTime: BigInt!

  """
  The stream in which this segment was created.
  """
  stream: Stream!
}

type Stream @entity(immutable: false) {
  # ------------------------------------ IDs ----------------------------------- #
  """
  Unique identifier: {contractAddress}-{chainId}-{tokenId}"
  """
  id: String!

  """
  Like the id: {contractAlias}-{chainId}-{tokenId}
  """
  alias: String!

  """
  The id of the chain, e.g., 137 for Polygon.
  """
  chainId: BigInt!

  """
  Unique global id as tracked by the `Watcher` entity.
  ðŸš¨ This may change if new data sources are added and the chronological order of streams changes.
  """
  subgraphId: BigInt!

  """
  The id provided by the Lockup contract. This is the ERC-721 tokenId.
  """
  tokenId: BigInt!

  # -------------------------------- Transaction ------------------------------- #
  """
  Hash of the Ethereum transaction that created this stream.
  """
  hash: Bytes!

  """
  Unix timestamp of the Ethereum transaction that created this stream.
  """
  timestamp: BigInt!

  # ---------------------------------- Actions ---------------------------------- #
  """
  Actions triggered by this stream.
  """
  actions: [Action!]! @derivedFrom(field: "stream")

  """
  Action in which the stream was canceled.
  """
  canceledAction: Action

  """
  Action in which the stream was made non-cancelable.
  Note: if the stream was made non-cancelable from the get-go, this is the same as the Create action.
  """
  renounceAction: Action

  # ---------------------------------- Lockup ---------------------------------- #
  """
  ERC-20 token distributed via this stream.
  """
  asset: Asset!

  """
  The batch the stream may be part of.
  Note: this is available only when created within a batch create transaction.
  """
  batch: Batch!

  """
  Flag indicating the cancelability of the stream.
  """
  cancelable: Boolean!

  """
  Flag indicating if the stream was canceled.
  """
  canceled: Boolean!

  """
  Unix timestamp for the when the stream was canceled.
  """
  canceledTime: BigInt

  """
  Category used for sorting.
  """
  category: StreamCategory!

  """
  The Lockup contract the stream originates from.
  """
  contract: Bytes!

  """
  The amount deposited when the stream was created.
  """
  depositAmount: BigInt!

  """
  Snapshot of the duration in seconds (the difference between end and start time).
  """
  duration: BigInt!

  """
  Unix timestamp for the end of the stream.
  """
  endTime: BigInt!

  """
  The account that funded the stream, which can be different from the sender.
  """
  funder: Bytes!

  """
  The amount that is still held by the stream regardless of whether if was fully vested or not.
  This is the difference between the deposit amount and all withdrawn amounts.
  """
  intactAmount: BigInt!

  """
  Users associated with the stream: recipient, sender, possibly the sender's proxy.
  """
  parties: [Bytes!]!

  """
  Position in the batch, if available.
  """
  position: BigInt!

  """
  Owner of the proxy when the stream is created through a PRBProxy (https://github.com/PaulRBerg/prb-proxy)
  Note that proxy = stream sender, and proxender = owner of proxy
  """
  proxender: Bytes

  """
  Flag for streams created through a PRBProxy.
  """
  proxied: Boolean!

  """
  Current recipient of the stream, with permission to withdraw funds to any third-party address.
  Note: the recipient can change on NFT transfer.
  """
  recipient: Bytes!

  """
  Unix timestamp for when the stream was made non-cancelable. This can coincide with the create time.
  """
  renounceTime: BigInt

  """
  Manager of the stream, defined at creation by the funder. This is usually the same as the funder.
  """
  sender: Bytes!

  """
  An optional parameter to specify the shape of the distribution.
  Available since Lockup v2.0.
  """
  shape: String

  """
  Unix timestamp for the start of the stream.
  """
  startTime: BigInt!

  """
  Flag indicating the transferability of the stream. This is set when the stream is created, and cannot be changed later.
  """
  transferable: Boolean!

  """
  Version of Lockup contract, e.g., v1.0.
  """
  version: String!

  """
  The sum of all withdrawn amounts.
  """
  withdrawnAmount: BigInt!

  # ------------------------------- LockupLinear ------------------------------- #
  """
  Flag for Linear streams with a cliff.
  """
  cliff: Boolean!

  """
  The amount that will unlock at the cliff time.
  """
  cliffAmount: BigInt

  """
  Unix timestamp for the start of the cliff.
  """
  cliffTime: BigInt

  """
  Flag for Linear stream with an initial unlock.
  Available since Lockup v2.0.
  """
  initial: Boolean!

  """
  The initial unlock amount of a Linear stream.
  Available since Lockup v2.0.
  """
  initialAmount: BigInt

  # ------------------------------- LockupDynamic ------------------------------ #
  """
  Segments of a Dynamic stream.
  """
  segments: [Segment!]! @derivedFrom(field: "stream")

  # ------------------------------ LockupTranched ------------------------------ #
  """
  Segments of a Tranched stream.
  """
  tranches: [Tranche!]! @derivedFrom(field: "stream")
}

type Tranche @entity(immutable: true) {
  """
  Unique identifier: {streamId}-{position}
  """
  id: String!

  """
  Amount distributed by this tranche.
  """
  amount: BigInt!

  """
  Total amount distributed at `endTime`. This is the sum of this tranche's amount and all previous tranches' amounts.
  """
  endAmount: BigInt!

  """
  Alias for the `timestamp` field.
  """
  endTime: BigInt!

  """
  Position of the tranche inside the array.
  """
  position: BigInt!

  """
  Total amount distributed by the stream at `startTime`. This is the sum of all previous tranches' amounts.
  """
  startAmount: BigInt!

  """
  Unix timestamp indicating the start of the tranche.
  This is also the end time of the previous tranche or, if this is the first tranche, it is the start time of the stream.
  """
  startTime: BigInt!

  """
  The stream in which this tranche was created.
  """
  stream: Stream!

  """
  Unix timestamp indicating the end of the tranche.
  """
  timestamp: BigInt!
}
