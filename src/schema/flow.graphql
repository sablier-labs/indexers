enum ActionCategory {
  Approval
  ApprovalForAll
  Adjust
  Create
  Deposit
  Pause
  Refund
  Restart
  Transfer
  Void
  Withdraw
}

enum StreamCategory {
  Flow
}

type Stream @entity {
  # ------------------------------------ IDs ----------------------------------- #
  """
  Unique identifier: {contractAddress}-{chainId}-{tokenId}
  """
  id: String!

  """
  Like the id: {contractAlias}-{chainId}-{tokenId}
  """
  alias: String!

  """
  The id of the chain, e.g., 137 for Polygon.
  """
  chainId: BigInt!

  """
  Unique global id as tracked by the `Watcher` entity.
  ðŸš¨ This may change if new data sources are added and the chronological order of streams changes.
  """
  subgraphId: BigInt!

  """
  The id provided by the Lockup contract. This is the ERC-721 tokenId.
  """
  tokenId: BigInt!

  # -------------------------------- Transaction ------------------------------- #
  """
  Hash of the Ethereum transaction that created this stream.
  """
  hash: Bytes!

  """
  Timestamp of the Ethereum transaction that created this stream.
  """
  timestamp: BigInt!

  # ---------------------------------- Actions --------------------------------- #
  """
  Actions triggered by this stream.
  """
  actions: [Action!]! @derivedFrom(field: "stream")

  """
  Action in which the payment rate was adjusted.
  """
  lastAdjustmentAction: Action

  """
  Action in which the stream was paused.
  """
  pausedAction: Action

  """
  Action in which the stream was voided.
  """
  voidedAction: Action

  # ----------------------------------- Flow ----------------------------------- #
  """
  ERC-20 token distributed via this stream.
  """
  asset: Asset!

  """
  This is equivalent to the value returned by ERC20.balanceOf, and it changes after deposit and withdrawal.
  """
  availableAmount: BigInt!

  """
  The batch the stream may be part of.
  Note: this is available only when created within a batch create transaction.
  """
  batch: Batch!

  """
  Category used for sorting.
  """
  category: StreamCategory!

  """
  The Flow contract the stream originates from.
  """
  contract: Bytes!

  """
  The account that created the stream, which can be different from the sender.
  """
  creator: Bytes!

  """
  Unix timestamp indicating the time when the stream will become insolvent.
  """
  depletionTime: BigInt!

  """
  The sum of all deposits.
  """
  depositedAmount: BigInt!

  """
  The amount of debt forgiven by a void action.
  """
  forgivenDebt: BigInt!

  """
  Unix timestamp for when the payment rate was adjusted.
  """
  lastAdjustmentTimestamp: BigInt!

  """
  Flag indicating if a stream is paused.
  """
  paused: Boolean!

  """
  Unix timestamp for when the stream was paused.
  """
  pausedTime: BigInt

  """
  Position in the batch, if available.
  """
  position: BigInt!

  """
  Current payment rate per second, denominated in 18 decimals.
  """
  ratePerSecond: BigInt!

  """
  Current recipient of the stream, with permission to withdraw funds to any third-party address.
  Note: the recipient can change on NFT transfer.
  """
  recipient: Bytes!

  """
  The sum of all refunds.
  """
  refundedAmount: BigInt!

  """
  Manager of the stream, defined at creation by the creator. This is usually the same as the creator.
  """
  sender: Bytes!

  """
  The amount streamed up until the time of the last adjustment, denominated in 18 decimals.
  """
  snapshotAmount: BigInt!

  """
  Unix timestamp for the start of the stream.
  """
  startTime: BigInt!

  """
  Flag indicating the transferability of the stream. This is set when the stream is created, and cannot be changed later.
  """
  transferable: Boolean!

  """
  Version of Flow contract, e.g. v1.0.
  """
  version: String!

  """
  Flag indicating if a stream is voided.
  """
  voided: Boolean!

  """
  Unix timestamp for when the stream was voided.
  """
  voidedTime: BigInt

  """
  The sum of all withdrawn amounts.
  """
  withdrawnAmount: BigInt!
}
